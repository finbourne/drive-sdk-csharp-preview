/*
 * FINBOURNE Drive API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.527
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Lusid.Drive.Sdk.Client;
using Lusid.Drive.Sdk.Model;

namespace Lusid.Drive.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead.
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        StorageObject CreateFile(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body);

        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> CreateFileWithHttpInfo(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body);
        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive.
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns></returns>
        void DeleteFile(string id);

        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo(string id);
        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive.
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadFile(string id);

        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadFileWithHttpInfo(string id);
        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive.
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>StorageObject</returns>
        StorageObject GetFile(string id);

        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> GetFileWithHttpInfo(string id);
        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive.
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        StorageObject UpdateFileContents(string id, int contentLength, byte[] body);

        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> UpdateFileContentsWithHttpInfo(string id, int contentLength, byte[] body);
        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive.
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>StorageObject</returns>
        StorageObject UpdateFileMetadata(string id, UpdateFile updateFile);

        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> UpdateFileMetadataWithHttpInfo(string id, UpdateFile updateFile);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> CreateFileAsync(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> CreateFileWithHttpInfoAsync(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadFileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> GetFileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> GetFileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> UpdateFileContentsAsync(string id, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> UpdateFileContentsWithHttpInfoAsync(string id, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> UpdateFileMetadataAsync(string id, UpdateFile updateFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> UpdateFileMetadataWithHttpInfoAsync(string id, UpdateFile updateFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiSync, IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private Lusid.Drive.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = Lusid.Drive.Sdk.Client.Configuration.MergeConfigurations(
                Lusid.Drive.Sdk.Client.GlobalConfiguration.Instance,
                new Lusid.Drive.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Lusid.Drive.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Lusid.Drive.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Lusid.Drive.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Lusid.Drive.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Lusid.Drive.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Lusid.Drive.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Lusid.Drive.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilesApi(Lusid.Drive.Sdk.Client.ISynchronousClient client, Lusid.Drive.Sdk.Client.IAsynchronousClient asyncClient, Lusid.Drive.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Lusid.Drive.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Lusid.Drive.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Lusid.Drive.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Drive.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Drive.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        public StorageObject CreateFile(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body)
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = CreateFileWithHttpInfo(xLusidDriveFilename, xLusidDrivePath, contentLength, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        public Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> CreateFileWithHttpInfo(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body)
        {
            // verify the required parameter 'xLusidDriveFilename' is set
            if (xLusidDriveFilename == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'xLusidDriveFilename' when calling FilesApi->CreateFile");

            // verify the required parameter 'xLusidDrivePath' is set
            if (xLusidDrivePath == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'xLusidDrivePath' when calling FilesApi->CreateFile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->CreateFile");

            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-lusid-drive-filename", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(xLusidDriveFilename)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-lusid-drive-path", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(xLusidDrivePath)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Length", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(contentLength)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request
            var localVarResponse = this.Client.Post<StorageObject>("/api/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> CreateFileAsync(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = await CreateFileWithHttpInfoAsync(xLusidDriveFilename, xLusidDrivePath, contentLength, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] CreateFile: Uploads a file to Lusid Drive. If using an SDK, consider using the UploadAsStreamAsync function for larger files instead. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<Lusid.Drive.Sdk.Client.ApiResponse<StorageObject>> CreateFileWithHttpInfoAsync(string xLusidDriveFilename, string xLusidDrivePath, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xLusidDriveFilename' is set
            if (xLusidDriveFilename == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'xLusidDriveFilename' when calling FilesApi->CreateFile");

            // verify the required parameter 'xLusidDrivePath' is set
            if (xLusidDrivePath == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'xLusidDrivePath' when calling FilesApi->CreateFile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->CreateFile");


            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-lusid-drive-filename", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(xLusidDriveFilename)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-lusid-drive-path", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(xLusidDrivePath)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Length", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(contentLength)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StorageObject>("/api/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns></returns>
        public void DeleteFile(string id)
        {
            DeleteFileWithHttpInfo(id);
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Lusid.Drive.Sdk.Client.ApiResponse<Object> DeleteFileWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->DeleteFile");

            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/files/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFileWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [EARLY ACCESS] DeleteFile: Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Lusid.Drive.Sdk.Client.ApiResponse<Object>> DeleteFileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->DeleteFile");


            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/files/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadFile(string id)
        {
            Lusid.Drive.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadFileWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Lusid.Drive.Sdk.Client.ApiResponse<System.IO.Stream> DownloadFileWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->DownloadFile");

            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/files/{id}/contents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Drive.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadFileWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] DownloadFile: Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Lusid.Drive.Sdk.Client.ApiResponse<System.IO.Stream>> DownloadFileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->DownloadFile");


            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/files/{id}/contents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>StorageObject</returns>
        public StorageObject GetFile(string id)
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = GetFileWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>ApiResponse of StorageObject</returns>
        public Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> GetFileWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFile");

            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageObject>("/api/files/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> GetFileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = await GetFileWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetFile: Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<Lusid.Drive.Sdk.Client.ApiResponse<StorageObject>> GetFileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFile");


            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StorageObject>("/api/files/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        public StorageObject UpdateFileContents(string id, int contentLength, byte[] body)
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = UpdateFileContentsWithHttpInfo(id, contentLength, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        public Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> UpdateFileContentsWithHttpInfo(string id, int contentLength, byte[] body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileContents");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->UpdateFileContents");

            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Length", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(contentLength)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageObject>("/api/files/{id}/contents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> UpdateFileContentsAsync(string id, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = await UpdateFileContentsWithHttpInfoAsync(id, contentLength, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileContents: Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<Lusid.Drive.Sdk.Client.ApiResponse<StorageObject>> UpdateFileContentsWithHttpInfoAsync(string id, int contentLength, byte[] body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileContents");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->UpdateFileContents");


            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Length", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(contentLength)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<StorageObject>("/api/files/{id}/contents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>StorageObject</returns>
        public StorageObject UpdateFileMetadata(string id, UpdateFile updateFile)
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = UpdateFileMetadataWithHttpInfo(id, updateFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>ApiResponse of StorageObject</returns>
        public Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> UpdateFileMetadataWithHttpInfo(string id, UpdateFile updateFile)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileMetadata");

            // verify the required parameter 'updateFile' is set
            if (updateFile == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'updateFile' when calling FilesApi->UpdateFileMetadata");

            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateFile;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageObject>("/api/files/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> UpdateFileMetadataAsync(string id, UpdateFile updateFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Drive.Sdk.Client.ApiResponse<StorageObject> localVarResponse = await UpdateFileMetadataWithHttpInfoAsync(id, updateFile, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] UpdateFileMetadata: Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<Lusid.Drive.Sdk.Client.ApiResponse<StorageObject>> UpdateFileMetadataWithHttpInfoAsync(string id, UpdateFile updateFile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileMetadata");

            // verify the required parameter 'updateFile' is set
            if (updateFile == null)
                throw new Lusid.Drive.Sdk.Client.ApiException(400, "Missing required parameter 'updateFile' when calling FilesApi->UpdateFileMetadata");


            Lusid.Drive.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Drive.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Lusid.Drive.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Lusid.Drive.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateFile;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.527");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<StorageObject>("/api/files/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}