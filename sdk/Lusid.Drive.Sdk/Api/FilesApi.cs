/* 
 * FINBOURNE Drive API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.167
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Drive.Sdk.Client;
using Lusid.Drive.Sdk.Model;

namespace Lusid.Drive.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        StorageObject CreateFile (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body);

        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> CreateFileWithHttpInfo (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body);
        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns></returns>
        void DeleteFile (string id);

        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo (string id);
        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadFile (string id);

        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadFileWithHttpInfo (string id);
        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>StorageObject</returns>
        StorageObject GetFile (string id);

        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> GetFileWithHttpInfo (string id);
        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        StorageObject UpdateFileContents (string id, int? contentLength, byte[] body);

        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> UpdateFileContentsWithHttpInfo (string id, int? contentLength, byte[] body);
        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>StorageObject</returns>
        StorageObject UpdateFileMetadata (string id, UpdateFile updateFile);

        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>ApiResponse of StorageObject</returns>
        ApiResponse<StorageObject> UpdateFileMetadataWithHttpInfo (string id, UpdateFile updateFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> CreateFileAsync (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body);

        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> CreateFileAsyncWithHttpInfo (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body);
        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync (string id);

        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string id);
        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync (string id);

        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadFileAsyncWithHttpInfo (string id);
        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> GetFileAsync (string id);

        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> GetFileAsyncWithHttpInfo (string id);
        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> UpdateFileContentsAsync (string id, int? contentLength, byte[] body);

        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> UpdateFileContentsAsyncWithHttpInfo (string id, int? contentLength, byte[] body);
        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>Task of StorageObject</returns>
        System.Threading.Tasks.Task<StorageObject> UpdateFileMetadataAsync (string id, UpdateFile updateFile);

        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageObject>> UpdateFileMetadataAsyncWithHttpInfo (string id, UpdateFile updateFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private Lusid.Drive.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new Lusid.Drive.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Drive.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FilesApi()
        {
            this.Configuration = Lusid.Drive.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Drive.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Lusid.Drive.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Drive.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Drive.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Drive.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Drive.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        public StorageObject CreateFile (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body)
        {
             ApiResponse<StorageObject> localVarResponse = CreateFileWithHttpInfo(xLusidDriveFilename, xLusidDrivePath, contentLength, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        public ApiResponse< StorageObject > CreateFileWithHttpInfo (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body)
        {
            // verify the required parameter 'xLusidDriveFilename' is set
            if (xLusidDriveFilename == null)
                throw new ApiException(400, "Missing required parameter 'xLusidDriveFilename' when calling FilesApi->CreateFile");
            // verify the required parameter 'xLusidDrivePath' is set
            if (xLusidDrivePath == null)
                throw new ApiException(400, "Missing required parameter 'xLusidDrivePath' when calling FilesApi->CreateFile");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling FilesApi->CreateFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FilesApi->CreateFile");

            var localVarPath = "./api/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xLusidDriveFilename != null) localVarHeaderParams.Add("x-lusid-drive-filename", this.Configuration.ApiClient.ParameterToString(xLusidDriveFilename)); // header parameter
            if (xLusidDrivePath != null) localVarHeaderParams.Add("x-lusid-drive-path", this.Configuration.ApiClient.ParameterToString(xLusidDrivePath)); // header parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> CreateFileAsync (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body)
        {
             ApiResponse<StorageObject> localVarResponse = await CreateFileAsyncWithHttpInfo(xLusidDriveFilename, xLusidDrivePath, contentLength, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Uploads a file to Lusid Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xLusidDriveFilename">File name.</param>
        /// <param name="xLusidDrivePath">File path.</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageObject>> CreateFileAsyncWithHttpInfo (string xLusidDriveFilename, string xLusidDrivePath, int? contentLength, byte[] body)
        {
            // verify the required parameter 'xLusidDriveFilename' is set
            if (xLusidDriveFilename == null)
                throw new ApiException(400, "Missing required parameter 'xLusidDriveFilename' when calling FilesApi->CreateFile");
            // verify the required parameter 'xLusidDrivePath' is set
            if (xLusidDrivePath == null)
                throw new ApiException(400, "Missing required parameter 'xLusidDrivePath' when calling FilesApi->CreateFile");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling FilesApi->CreateFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FilesApi->CreateFile");

            var localVarPath = "./api/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xLusidDriveFilename != null) localVarHeaderParams.Add("x-lusid-drive-filename", this.Configuration.ApiClient.ParameterToString(xLusidDriveFilename)); // header parameter
            if (xLusidDrivePath != null) localVarHeaderParams.Add("x-lusid-drive-path", this.Configuration.ApiClient.ParameterToString(xLusidDrivePath)); // header parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns></returns>
        public void DeleteFile (string id)
        {
             DeleteFileWithHttpInfo(id);
        }

        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFileWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->DeleteFile");

            var localVarPath = "./api/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync (string id)
        {
             await DeleteFileAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// [EXPERIMENTAL] Deletes a file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->DeleteFile");

            var localVarPath = "./api/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadFile (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DownloadFileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DownloadFileWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->DownloadFile");

            var localVarPath = "./api/files/{id}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DownloadFileAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Download the file from Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be downloaded.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadFileAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->DownloadFile");

            var localVarPath = "./api/files/{id}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>StorageObject</returns>
        public StorageObject GetFile (string id)
        {
             ApiResponse<StorageObject> localVarResponse = GetFileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>ApiResponse of StorageObject</returns>
        public ApiResponse< StorageObject > GetFileWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFile");

            var localVarPath = "./api/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> GetFileAsync (string id)
        {
             ApiResponse<StorageObject> localVarResponse = await GetFileAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Get a file stored in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be retrieved.</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageObject>> GetFileAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->GetFile");

            var localVarPath = "./api/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>StorageObject</returns>
        public StorageObject UpdateFileContents (string id, int? contentLength, byte[] body)
        {
             ApiResponse<StorageObject> localVarResponse = UpdateFileContentsWithHttpInfo(id, contentLength, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageObject</returns>
        public ApiResponse< StorageObject > UpdateFileContentsWithHttpInfo (string id, int? contentLength, byte[] body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileContents");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling FilesApi->UpdateFileContents");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FilesApi->UpdateFileContents");

            var localVarPath = "./api/files/{id}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFileContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> UpdateFileContentsAsync (string id, int? contentLength, byte[] body)
        {
             ApiResponse<StorageObject> localVarResponse = await UpdateFileContentsAsyncWithHttpInfo(id, contentLength, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Updates contents of a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique file identifier</param>
        /// <param name="contentLength">The size in bytes of the file to be uploaded</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageObject>> UpdateFileContentsAsyncWithHttpInfo (string id, int? contentLength, byte[] body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileContents");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling FilesApi->UpdateFileContents");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FilesApi->UpdateFileContents");

            var localVarPath = "./api/files/{id}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFileContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>StorageObject</returns>
        public StorageObject UpdateFileMetadata (string id, UpdateFile updateFile)
        {
             ApiResponse<StorageObject> localVarResponse = UpdateFileMetadataWithHttpInfo(id, updateFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>ApiResponse of StorageObject</returns>
        public ApiResponse< StorageObject > UpdateFileMetadataWithHttpInfo (string id, UpdateFile updateFile)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileMetadata");
            // verify the required parameter 'updateFile' is set
            if (updateFile == null)
                throw new ApiException(400, "Missing required parameter 'updateFile' when calling FilesApi->UpdateFileMetadata");

            var localVarPath = "./api/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateFile != null && updateFile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFile; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFileMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>Task of StorageObject</returns>
        public async System.Threading.Tasks.Task<StorageObject> UpdateFileMetadataAsync (string id, UpdateFile updateFile)
        {
             ApiResponse<StorageObject> localVarResponse = await UpdateFileMetadataAsyncWithHttpInfo(id, updateFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Updates metadata for a file in Drive. 
        /// </summary>
        /// <exception cref="Lusid.Drive.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the file to be updated</param>
        /// <param name="updateFile">Update to be applied to file</param>
        /// <returns>Task of ApiResponse (StorageObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageObject>> UpdateFileMetadataAsyncWithHttpInfo (string id, UpdateFile updateFile)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->UpdateFileMetadata");
            // verify the required parameter 'updateFile' is set
            if (updateFile == null)
                throw new ApiException(400, "Missing required parameter 'updateFile' when calling FilesApi->UpdateFileMetadata");

            var localVarPath = "./api/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateFile != null && updateFile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFile; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.1.167";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFileMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (StorageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageObject)));
        }

    }
}