/* 
 * FINBOURNE Drive API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.60
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Drive.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Drive.Sdk.Model
{
    /// <summary>
    /// EntityTagHeaderValue
    /// </summary>
    [DataContract]
    public partial class EntityTagHeaderValue :  IEquatable<EntityTagHeaderValue>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityTagHeaderValue" /> class.
        /// </summary>
        /// <param name="tag">tag.</param>
        public EntityTagHeaderValue(StringSegment tag = default(StringSegment))
        {
            this.Tag = tag;
        }
        
        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public StringSegment Tag { get; set; }

        /// <summary>
        /// Gets or Sets IsWeak
        /// </summary>
        [DataMember(Name="isWeak", EmitDefaultValue=false)]
        public bool? IsWeak { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityTagHeaderValue {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  IsWeak: ").Append(IsWeak).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityTagHeaderValue);
        }

        /// <summary>
        /// Returns true if EntityTagHeaderValue instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityTagHeaderValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityTagHeaderValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.IsWeak == input.IsWeak ||
                    (this.IsWeak != null &&
                    this.IsWeak.Equals(input.IsWeak))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.IsWeak != null)
                    hashCode = hashCode * 59 + this.IsWeak.GetHashCode();
                return hashCode;
            }
        }
    }

}
