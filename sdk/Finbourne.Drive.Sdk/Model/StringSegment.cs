/* 
 * FINBOURNE Drive API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.60
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Drive.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Drive.Sdk.Model
{
    /// <summary>
    /// StringSegment
    /// </summary>
    [DataContract]
    public partial class StringSegment :  IEquatable<StringSegment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringSegment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public StringSegment()
        {
        }
        
        /// <summary>
        /// Gets or Sets Buffer
        /// </summary>
        [DataMember(Name="buffer", EmitDefaultValue=false)]
        public string Buffer { get; private set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; private set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int? Length { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; private set; }

        /// <summary>
        /// Gets or Sets HasValue
        /// </summary>
        [DataMember(Name="hasValue", EmitDefaultValue=false)]
        public bool? HasValue { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StringSegment {\n");
            sb.Append("  Buffer: ").Append(Buffer).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  HasValue: ").Append(HasValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StringSegment);
        }

        /// <summary>
        /// Returns true if StringSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of StringSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StringSegment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Buffer == input.Buffer ||
                    (this.Buffer != null &&
                    this.Buffer.Equals(input.Buffer))
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.HasValue == input.HasValue ||
                    (this.HasValue != null &&
                    this.HasValue.Equals(input.HasValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Buffer != null)
                    hashCode = hashCode * 59 + this.Buffer.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.HasValue != null)
                    hashCode = hashCode * 59 + this.HasValue.GetHashCode();
                return hashCode;
            }
        }
    }

}
